{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Combined data saved as 'combined_health_data.csv'.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Step 1: Define the list of columns related to each area\n",
    "columns_of_interest = [\n",
    "    # Blood Pressure\n",
    "    'BPXSY1', 'BPXDI1', 'BPXSY2', 'BPXDI2', 'BPXSY3', 'BPXDI3', 'BPXSY4', 'BPXDI4',\n",
    "    'BPXCHR', 'BPAARM', 'BPACSZ', 'BPXPLS', 'BPXPULS', 'BPXPTY', 'BPXML1', 'BPXSAR', 'BPXDAR',\n",
    "\n",
    "    # BMI\n",
    "    'BMXWT', 'BMIWT', 'BMXBMI', 'BMDBMIC', 'BMXHT', 'BMIHT', 'BMXWAIST', 'BMIWAIST', 'BMXHIP', 'BMIHIP',\n",
    "\n",
    "    # Gender\n",
    "    'RIAGENDR',\n",
    "\n",
    "    # Skin Thickness\n",
    "    'BMXTHICR', 'BMITHICR', 'BMXTRI', 'BMITRI', 'BMXSUB', 'BMISUB'\n",
    "\n",
    "    # Primary Key\n",
    "    'SEQN'\n",
    "]\n",
    "\n",
    "# List of filenames\n",
    "files = [\n",
    "    \"BMX.csv\", \"BMX_B.csv\", \"BMX_C.csv\", \"BMX_D.csv\", \"BMX_E.csv\", \"BMX_F.csv\", \"BMX_G.csv\", \n",
    "    \"BMX_H.csv\", \"BMX_I.csv\", \"BMX_J.csv\", \"BMX_L.csv\", \"BPX.csv\", \"BPX_B.csv\", \"BPX_C.csv\", \n",
    "    \"BPX_D.csv\", \"BPX_E.csv\", \"BPX_F.csv\", \"BPX_G.csv\", \"BPX_H.csv\", \"BPX_I.csv\", \"BPX_J.csv\", \n",
    "    \"P_BMX.csv\"\n",
    "]\n",
    "\n",
    "# Step 2: Initialize an empty list to hold each DataFrame\n",
    "filtered_dfs = []\n",
    "\n",
    "# Step 3: Loop through each file, filter for relevant columns, and append to list\n",
    "for file in files:\n",
    "    try:\n",
    "        # Read the file and filter the columns\n",
    "        df = pd.read_csv(file, usecols=lambda col: col in columns_of_interest)\n",
    "        if not df.empty:\n",
    "            filtered_dfs.append(df)\n",
    "        else:\n",
    "            print(f\"File {file} has no relevant columns.\")\n",
    "    except ValueError as e:\n",
    "        print(f\"Error reading {file}: {e}\")\n",
    "\n",
    "# Step 4: Check if any DataFrames were loaded before attempting to concatenate\n",
    "if filtered_dfs:\n",
    "    combined_df = pd.concat(filtered_dfs, ignore_index=True).drop_duplicates()\n",
    "    combined_df.to_csv('combined_health_data.csv', index=False)\n",
    "    print(\"Combined data saved as 'combined_health_data.csv'.\")\n",
    "else:\n",
    "    print(\"No data to combine. Please check the column names and files.\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "### BMX.csv:\n",
      "- **Dropped Columns**: BMAAMP, BMAEXCMT, BMAEXLEN, BMAEXSTS, BMALLEXT, BMALLKNE, BMALOREX, BMALORKN, BMAULEXT, BMAUPLEL, BMAUPREL, BMAUREXT, BMIARMC, BMIARML, BMICALF, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXCALF, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n",
      "### BMX_B.csv:\n",
      "- **Dropped Columns**: BMIARMC, BMIARML, BMICALF, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXCALF, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n",
      "### BMX_C.csv:\n",
      "- **Dropped Columns**: BMDARMLF, BMDCALFF, BMDLEGF, BMDRECUF, BMDSTATS, BMDSUBF, BMDTHICF, BMIARMC, BMIARML, BMICALF, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXCALF, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n",
      "### BMX_D.csv:\n",
      "- **Dropped Columns**: BMDSTATS, BMIARMC, BMIARML, BMICALF, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXCALF, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n",
      "### BMX_E.csv:\n",
      "- **Dropped Columns**: BMDSTATS, BMIARMC, BMIARML, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n",
      "### BMX_F.csv:\n",
      "- **Dropped Columns**: BMDSTATS, BMIARMC, BMIARML, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n",
      "### BMX_G.csv:\n",
      "- **Dropped Columns**: BMDAVSAD, BMDSADCM, BMDSTATS, BMIARMC, BMIARML, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXHEAD, BMXLEG, BMXRECUM, BMXSAD1, BMXSAD2, BMXSAD3, BMXSAD4\n",
      "\n",
      "### BMX_H.csv:\n",
      "- **Dropped Columns**: BMDAVSAD, BMDSADCM, BMDSTATS, BMIARMC, BMIARML, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXHEAD, BMXLEG, BMXRECUM, BMXSAD1, BMXSAD2, BMXSAD3, BMXSAD4\n",
      "\n",
      "### BMX_I.csv:\n",
      "- **Dropped Columns**: BMDAVSAD, BMDSADCM, BMDSTATS, BMIARMC, BMIARML, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXHEAD, BMXLEG, BMXRECUM, BMXSAD1, BMXSAD2, BMXSAD3, BMXSAD4\n",
      "\n",
      "### BMX_J.csv:\n",
      "- **Dropped Columns**: BMDSTATS, BMIARMC, BMIARML, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n",
      "### BMX_L.csv:\n",
      "- **Dropped Columns**: BMDSTATS, BMIARMC, BMIARML, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n",
      "### BPX.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, BPQ150A, BPQ150B, BPQ150C, BPQ150D, BPXDB, PEASCCT1, PEASCST1, PEASCTM1\n",
      "\n",
      "### BPX_B.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, BPQ150A, BPQ150B, BPQ150C, BPQ150D, BPXDB, PEASCCT1, PEASCST1, PEASCTM1\n",
      "\n",
      "### BPX_C.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, BPQ150A, BPQ150B, BPQ150C, BPQ150D, BPXDB, PEASCCT1, PEASCST1, PEASCTM1\n",
      "\n",
      "### BPX_D.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, BPQ150A, BPQ150B, BPQ150C, BPQ150D, BPXDB, PEASCCT1, PEASCST1, PEASCTM1\n",
      "\n",
      "### BPX_E.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, BPQ150A, BPQ150B, BPQ150C, BPQ150D, PEASCCT1, PEASCST1, PEASCTM1\n",
      "\n",
      "### BPX_F.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, BPQ150A, BPQ150B, BPQ150C, BPQ150D, PEASCCT1, PEASCST1, PEASCTM1\n",
      "\n",
      "### BPX_G.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, BPQ150A, BPQ150B, BPQ150C, BPQ150D, PEASCCT1, PEASCST1, PEASCTM1\n",
      "\n",
      "### BPX_H.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, PEASCCT1, PEASCST1, PEASCTM1\n",
      "\n",
      "### BPX_I.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, PEASCCT1\n",
      "\n",
      "### BPX_J.csv:\n",
      "- **Dropped Columns**: BPAEN1, BPAEN2, BPAEN3, BPAEN4, PEASCCT1\n",
      "\n",
      "### P_BMX.csv:\n",
      "- **Dropped Columns**: BMDSTATS, BMIARMC, BMIARML, BMIHEAD, BMILEG, BMIRECUM, BMXARMC, BMXARML, BMXHEAD, BMXLEG, BMXRECUM\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# List of CSV filenames to load and process\n",
    "csv_files = [ \"BMX.csv\", \"BMX_B.csv\", \"BMX_C.csv\", \"BMX_D.csv\", \"BMX_E.csv\", \"BMX_F.csv\", \"BMX_G.csv\", \n",
    "    \"BMX_H.csv\", \"BMX_I.csv\", \"BMX_J.csv\", \"BMX_L.csv\", \"BPX.csv\", \"BPX_B.csv\", \"BPX_C.csv\", \n",
    "    \"BPX_D.csv\", \"BPX_E.csv\", \"BPX_F.csv\", \"BPX_G.csv\", \"BPX_H.csv\", \"BPX_I.csv\", \"BPX_J.csv\", \n",
    "    \"P_BMX.csv\"]\n",
    "\n",
    "# List of columns of interest\n",
    "columns_of_interest = [\n",
    "    # Blood Pressure\n",
    "    'BPXSY1', 'BPXDI1', 'BPXSY2', 'BPXDI2', 'BPXSY3', 'BPXDI3', 'BPXSY4', 'BPXDI4',\n",
    "    'BPXCHR', 'BPAARM', 'BPACSZ', 'BPXPLS', 'BPXPULS', 'BPXPTY', 'BPXML1', 'BPXSAR', 'BPXDAR',\n",
    "\n",
    "    # BMI\n",
    "    'BMXWT', 'BMIWT', 'BMXBMI', 'BMDBMIC', 'BMXHT', 'BMIHT', 'BMXWAIST', 'BMIWAIST', 'BMXHIP', 'BMIHIP',\n",
    "\n",
    "    # Gender\n",
    "    'RIAGENDR',\n",
    "\n",
    "    # Skin Thickness\n",
    "    'BMXTHICR', 'BMITHICR', 'BMXTRI', 'BMITRI', 'BMXSUB', 'BMISUB',\n",
    "\n",
    "     # Primary Key\n",
    "    'SEQN'\n",
    "]\n",
    "\n",
    "# Dictionary to store dropped columns for each CSV file\n",
    "dropped_columns_dict = {}\n",
    "\n",
    "# Loop through each file and process\n",
    "for file in csv_files:\n",
    "    # Load the data\n",
    "    df = pd.read_csv(file)\n",
    "    \n",
    "    # Find the columns that are not in the columns_of_interest list\n",
    "    dropped_columns = df.columns.difference(columns_of_interest)\n",
    "    \n",
    "    # Store dropped columns in dictionary\n",
    "    dropped_columns_dict[file] = dropped_columns.tolist()\n",
    "\n",
    "# Print the dropped columns for each file\n",
    "for file, dropped_columns in dropped_columns_dict.items():\n",
    "    print(f\"### {file}:\")\n",
    "    print(f\"- **Dropped Columns**: {', '.join(dropped_columns)}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Combined CSV file created: combined_blood_pressure_data.csv\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# List of blood pressure columns\n",
    "bp_columns = [\n",
    "    'BPXSY1', 'BPXDI1', 'BPXSY2', 'BPXDI2', 'BPXSY3', 'BPXDI3', 'BPXSY4', 'BPXDI4',\n",
    "    'BPXCHR', 'BPAARM', 'BPACSZ', 'BPXPLS', 'BPXPULS', 'BPXPTY', 'BPXML1', 'BPXSAR', 'BPXDAR', 'SEQN'\n",
    "]\n",
    "\n",
    "# List of CSV filenames to load and process\n",
    "csv_files = ['BMX.csv', 'BMX_B.csv', 'BMX_C.csv', 'BMX_D.csv', 'BMX_E.csv', 'BMX_F.csv', 'BMX_G.csv', 'BMX_H.csv', 'BMX_I.csv', 'BMX_L.csv', 'BPX.csv', 'BPX_B.csv', 'BPX_C.csv', 'BPX_D.csv', 'BPX_E.csv', 'BPX_F.csv', 'P_BMX.CSV']\n",
    "\n",
    "# Initialize an empty list to collect data from each file\n",
    "all_data = []\n",
    "\n",
    "# Loop through each file to process\n",
    "for file in csv_files:\n",
    "    # Load the CSV file\n",
    "    df = pd.read_csv(file)\n",
    "    \n",
    "    # Filter the DataFrame to keep only the blood pressure columns\n",
    "    if all(col in df.columns for col in bp_columns):\n",
    "        df_filtered = df[bp_columns]\n",
    "        all_data.append(df_filtered)\n",
    "\n",
    "# Combine all the filtered data into a single DataFrame\n",
    "combined_data = pd.concat(all_data, ignore_index=True)\n",
    "\n",
    "# Save the combined DataFrame to a new CSV file\n",
    "output_file = \"combined_blood_pressure_data.csv\"\n",
    "combined_data.to_csv(output_file, index=False)\n",
    "\n",
    "print(f\"Combined CSV file created: {output_file}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Combined CSV file created: combined_bmi_data.csv\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# List of BMI columns\n",
    "bmi_columns = [\n",
    "    'BMXWT', 'BMIWT', 'BMXBMI', 'BMDBMIC', 'BMXHT', 'BMIHT', 'BMXWAIST', 'BMIWAIST', 'BMXHIP', 'BMIHIP', 'SEQN'\n",
    "]\n",
    "\n",
    "# List of CSV filenames to load and process\n",
    "csv_files = ['BMX.csv', 'BMX_B.csv', 'BMX_C.csv', 'BMX_D.csv', 'BMX_E.csv', 'BMX_F.csv', 'BMX_G.csv', 'BMX_H.csv', 'BMX_I.csv', 'BMX_L.csv', 'BPX.csv', 'BPX_B.csv', 'BPX_C.csv', 'BPX_D.csv', 'BPX_E.csv', 'BPX_F.csv', 'P_BMX.CSV']\n",
    "\n",
    "# Initialize an empty list to collect data from each file\n",
    "all_data = []\n",
    "\n",
    "# Loop through each file to process\n",
    "for file in csv_files:\n",
    "    # Load the CSV file\n",
    "    df = pd.read_csv(file)\n",
    "    \n",
    "    # Filter the DataFrame to keep only the BMI columns\n",
    "    if all(col in df.columns for col in bmi_columns):\n",
    "        df_filtered = df[bmi_columns]\n",
    "        all_data.append(df_filtered)\n",
    "\n",
    "# Combine all the filtered data into a single DataFrame\n",
    "combined_data = pd.concat(all_data, ignore_index=True)\n",
    "\n",
    "# Save the combined DataFrame to a new CSV file\n",
    "output_file = \"combined_bmi_data.csv\"\n",
    "combined_data.to_csv(output_file, index=False)\n",
    "\n",
    "print(f\"Combined CSV file created: {output_file}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Combined CSV file created: combined_skin_thickness_data.csv\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# List of Skin Thickness columns\n",
    "skin_thickness_columns = [\n",
    "    'BMXTHICR', 'BMITHICR', 'BMXTRI', 'BMITRI', 'BMXSUB', 'BMISUB', 'SEQN'\n",
    "]\n",
    "\n",
    "# List of CSV filenames to load and process\n",
    "csv_files = ['BMX.csv', 'BMX_B.csv', 'BMX_C.csv', 'BMX_D.csv', 'BMX_E.csv', 'BMX_F.csv', 'BMX_G.csv', 'BMX_H.csv', 'BMX_I.csv', 'BMX_L.csv', 'BPX.csv', 'BPX_B.csv', 'BPX_C.csv', 'BPX_D.csv', 'BPX_E.csv', 'BPX_F.csv', 'P_BMX.CSV']\n",
    "\n",
    "# Initialize an empty list to collect data from each file\n",
    "all_data = []\n",
    "\n",
    "# Loop through each file to process\n",
    "for file in csv_files:\n",
    "    # Load the CSV file\n",
    "    df = pd.read_csv(file)\n",
    "    \n",
    "    # Filter the DataFrame to keep only the Skin Thickness columns\n",
    "    if all(col in df.columns for col in skin_thickness_columns):\n",
    "        df_filtered = df[skin_thickness_columns]\n",
    "        all_data.append(df_filtered)\n",
    "\n",
    "# Combine all the filtered data into a single DataFrame\n",
    "combined_data = pd.concat(all_data, ignore_index=True)\n",
    "\n",
    "# Save the combined DataFrame to a new CSV file\n",
    "output_file = \"combined_skin_thickness_data.csv\"\n",
    "combined_data.to_csv(output_file, index=False)\n",
    "\n",
    "print(f\"Combined CSV file created: {output_file}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column names in p_BMX.csv:\n",
      "['SEQN', 'BMDSTATS', 'BMXWT', 'BMIWT', 'BMXRECUM', 'BMIRECUM', 'BMXHEAD', 'BMIHEAD', 'BMXHT', 'BMIHT', 'BMXBMI', 'BMDBMIC', 'BMXLEG', 'BMILEG', 'BMXARML', 'BMIARML', 'BMXARMC', 'BMIARMC', 'BMXWAIST', 'BMIWAIST', 'BMXHIP', 'BMIHIP']\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the CSV file\n",
    "df = pd.read_csv('p_BMX.csv')\n",
    "\n",
    "# Fetch the column names\n",
    "column_names = df.columns.tolist()\n",
    "\n",
    "# Print the column names\n",
    "print(\"Column names in p_BMX.csv:\")\n",
    "print(column_names)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
